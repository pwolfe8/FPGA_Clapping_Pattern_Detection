{
/*
    // Place your snippets for VHDL here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    "Print to console": {
        "prefix": "log",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    }
*/


// ========================================================== //
// ======== main module and testbench shell snippets ======== //
// ========================================================== //

    // standard entity shell
    "Standard Entity/Module Shell": {
        "prefix": "module",
        "body": [
            "--Engineer     : Philip Wolfe",
            "--Date         : ${3:MM}/${4:DD}/2017",
            "--Name of file : ${TM_FILENAME}",
            "--Description  : ${1:description}",
            "library ieee;",
            "use ieee.std_logic_1164.all;",
            "use ieee.numeric_std.all;",
            "",
            "entity ${TM_FILENAME_BASE} is",
                "\tgeneric (",
                    "\t\t${5:_name_}\t\t\t: ${6:_type_}",
                "\t);",
                "\tport (",
                    "\t\t-- inputs --",
                    "\t\t${7:_name_}\t\t: in  ${8:_type_};",
                    "\t\t-- outputs --",
                    "\t\t${9:_name_}\t\t: out ${10:_type_}",
                "\t);",
            "end ${TM_FILENAME_BASE};",
            "",
            "architecture ${TM_FILENAME_BASE}_arch of ${TM_FILENAME_BASE} is",
                "\t-- constant definitions",
                "\t${11}",
                "\t-- signal declarations",
                "\t${12}",
            "",
            "begin",
                "\t-- normal processes",
                "\t${13}",
                "\t-- component instantiations",
                "\t${0}", // final cursor position
                "\t",
            "end ${TM_FILENAME_BASE}_arch;",
            ""
        ],
        "description": "Standard vhdl snippet for:\n  header comments, includes, entity, & arch.\n"
    },

    // declaration/definitions snippets
    "Constant Declaration": {
        "prefix": "const_snippet",
        "body": "constant ${1:_name_} : ${2:_type_} := ${3:_value_};",
        "description": "Snippet to make a constant.\n"
    },
    "Signal Declaration": {
        "prefix": "sig_snippet",
        "body": "signal ${1:_name_} : ${2:_type_};",
        "description": "Snippet to make a signal.\n"
    },
    "Type Definition": {
        "prefix": "typ_snippet",
        "body": "type ${1:_name_} is ${2:_new_type_};",
        "description": "Snippet to define a new type.\n"
    },
    "Alias Definition": {
        "prefix": "alias_snippet",
        "body": "alias ${1:_alias_name_} : ${2:_type_} is ${3:_slice_of_array_};",
        "description": "Snippet to create an alias.\n"
    },

    // sequential snippets (process statement stuff)
    // put these in a process statement (except for the process statement itself)
    "Generic Process": {
        "prefix": "proc_snippet",
        "body": [ 
            "process ( ${1:clk, reset} ) begin",
                "\tif ( ${2:reset='1'} ) then",
                    "\t\t${3}",
                "\telsif ( ${4:rising_edge(clk)} ) then",
                    "\t\t${5}",
                "\tend if;",
            "end process;"
        ],
        "description": "Generic \"process\" statement.\n"
    },
    "If Statement": {
        "prefix": "if_snippet",
        "body": [
            "if ( ${1} ) then",
                "\t${2}",
            "end if;"
        ],
        "description": "If statement snippet.\n"
    },
    "Case Statement": {
        "prefix": "case_snippet",
        "body": [
            "case $1 is",
                "\twhen $2 =>",
                    "\t\tif ( $3 ) then",
                        "\t\t\t$4",
                    "\t\tend if;",
                "\twhen others =>",
                    "\t\t$5",
            "end case;"
        ],
        "description": "case statement snippet.\n"
    },

    // concurrent snippets
    "With Select Snippet": {
        "prefix": "with_select_snippet",
        "body": [
            "with ( ${1:_signal_to_check_} ) select",
                "\t${2:_signal_to_assign_} <=",
                    "\t\t${3:_value_to_assign} when ${4:_checked_signal_is_this_value},",
                    "\t\t${5:_another_value_to_assign_} when others;"
        ],
        "description": "\"with .. select\" statement.\n"
    },
    "When Else Snippet": {
        "prefix": "when_else_snippet",
        "body": [
            "${1:_signal_} <=",
                "\t${2:_value_} when ${3:_condition_} else",
                "\t${4:_value_} when ${5:_condition_};"
        ],
        "description": "When else snippet.\nlike with else, but when you need a conditional\n"
    },

    // instantiation
    "Instantiation": {
        "prefix": "inst_snippet",
        "body": [ 
            "${1:_name_} : entity work.${2:_entity_name_}",
                "\tgeneric map (",
                    "\t\t${3: -- map generics here}",
                "\t)",
                "\tport map (",
                    "\t\t${4:-- Paste entity's ports here. Connect signals in either form:\n\t--    \"in1,in2,out1,out2\"\n\t--    \"portname1=>signal1, portname2=>signal2\"}",
                "\t);\n"
        ],
        "description": "Snippet to instantiate another entity.\n"
    },
    // TODO: for generate loop


    // types
    "Array Snippet": {
        "prefix": "arr_snippet",
        "body": "array($1 downto $2) of ${3:_type_}",
        "description": "Snippet to create a basic array.\n"
    },
    "Vector Snippet": {
        "prefix": "vector",
        "body": "${1:std_logic_vector}($2 downto $3)",
        "description": "Snippet to make a vector.\nDefault: std_logic_vector.\n"
    },
    "Std Logic Snippet": { 
        "prefix": "std_logic",
        "body": "std_logic",
        // basically the header std_logic_1164 from "use" includes always gets in the way
        "description": "Snippet to show std_logic preview.\n" 
    },

    // values
    "Zero Aggregate Vector": {
        "prefix": "zero",
        "body": "(others=>'0')",
        "description": "Aggregate for setting all bits in vector to zero.\n"
    },
    "Zero Aggregate Array": {
        "prefix": "zeroarray",
        "body": "(others=>(others=>'0'))",
        "description": "Aggregate for setting all elements (and bit in element) to zero.\n"
    },


// ==================================== //
// ======== Testbench Snippets ======== //
// ==================================== //

    "Standard Testbench": {
        "prefix": "testbench_snippet",
        "body": [
            "--Engineer     : Philip Wolfe",
            "--Date         : ${3:MM}/${4:DD}/2017",
            "--Name of file : ${TM_FILENAME}",
            "--Description  : Test bench for ${1:_entity_being_tested_}.",
            "library ieee;",
            "use ieee.std_logic_1164.all;",
            "use ieee.numeric_std.all;",
            "",
            "entity tb_${1} is",
            "end tb_${1};",
            "",
            "architecture tb_${1}_arch of tb_${1} is",
                "\t-- constant definitions",
                "\tconstant T : time := 10 ns;",
                "\t${5}",
                "\t-- testbench signal declarations",
                "\t${6}",
            "",
            "begin",
                "\t-- instantiate design under test",
                "\tDUT : entity work.${1}",
                    "\t\tgeneric map (",
                    "\t\t\t${7}",
                    "\t\t)",
                    "\t\tport map (",
                    "\t\t\t${8:-- Paste entity's ports here. Connect signals in either form:\n\t\t\t--    \"in1,in2,out1,out2\"\n\t\t\t--    \"portname1=>signal1, portname2=>signal2\"}",
                    "\t\t);",
                "",
                "\t-- set up clock if you need it",
                "\t-- process begin",
                    "\t-- \tclk <= '1';",
                    "\t-- \twait for T/2;",
                    "\t-- \tclk <= '0';",
                    "\t-- \twait for T/2;",
                "\t-- end process;",
                "\t",
                "\tprocess begin",
                    "\t\t-- initialize signals",
                    "\t\t${8}",
                    "\t\t-- implement some test cases",
                    "\t\t${9}",
                    "\t\t-- end test",
                    "\t\tassert false report LF & LF & \"**** Test Completed ****\" & LF severity failure;",
                "\tend process;",
                "",
            "end tb_${1}_arch;",
            ""
        ],
        "description": "standard vhdl header comments, include, entity, and arch"
    },

    "Insert a Test Case": {
        "prefix": "testcase_snippet",
        "body": [ 
            "-- TEST CASE ${1:1} --",
            "${2:_change_signals_here_}",
            "wait for 10 ns;",
            "assert ( ${3:_some_boolean_checking_output_} )",
            "report LF",
                "\t& \"================ Test case $1 failed! ================\" & LF",
                "\t& \"received: \" & to_hstring(${4:_signal_being_checked_}) & LF",
                "\t& \"expected: \" & to_hstring(${5:_expected_signal_}) & LF",
                "\t& \"=====================================================\"",
            "severity error;\n"
        ],
        "description": "Inserts a testcase. Use VHDL 2008 compiler for to_hstring()"
    }

}